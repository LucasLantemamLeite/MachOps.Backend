// <auto-generated />
using System;
using MachOps.Migrations.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MachOps.Migrations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250813141546_ColumnsAsDateOnly")]
    partial class ColumnsAsDateOnly
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MachOps.Domain.Entities.MachineEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Machines", (string)null);
                });

            modelBuilder.Entity("MachOps.Domain.Entities.MachineEntity", b =>
                {
                    b.OwnsOne("MachOps.Domain.ValueObjects.Machines.CreateAt", "CreateAt", b1 =>
                        {
                            b1.Property<int>("MachineEntityId")
                                .HasColumnType("Int");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("Datetime")
                                .HasColumnName("CreateAt");

                            b1.HasKey("MachineEntityId");

                            b1.ToTable("Machines");

                            b1.WithOwner()
                                .HasForeignKey("MachineEntityId");
                        });

                    b.OwnsOne("MachOps.Domain.ValueObjects.Machines.Description", "Description", b1 =>
                        {
                            b1.Property<int>("MachineEntityId")
                                .HasColumnType("Int");

                            b1.Property<string>("Value")
                                .HasColumnType("Nvarchar(100)")
                                .HasColumnName("Description");

                            b1.HasKey("MachineEntityId");

                            b1.ToTable("Machines");

                            b1.WithOwner()
                                .HasForeignKey("MachineEntityId");
                        });

                    b.OwnsOne("MachOps.Domain.ValueObjects.Machines.ExpectedReturnDate", "ExpectedReturnDate", b1 =>
                        {
                            b1.Property<int>("MachineEntityId")
                                .HasColumnType("Int");

                            b1.Property<DateTime?>("Value")
                                .HasColumnType("Date")
                                .HasColumnName("ExpectedReturnDate");

                            b1.HasKey("MachineEntityId");

                            b1.ToTable("Machines");

                            b1.WithOwner()
                                .HasForeignKey("MachineEntityId");
                        });

                    b.OwnsOne("MachOps.Domain.ValueObjects.Machines.Location", "Location", b1 =>
                        {
                            b1.Property<int>("MachineEntityId")
                                .HasColumnType("Int");

                            b1.Property<string>("Value")
                                .HasColumnType("Nvarchar(20)")
                                .HasColumnName("Location");

                            b1.HasKey("MachineEntityId");

                            b1.ToTable("Machines");

                            b1.WithOwner()
                                .HasForeignKey("MachineEntityId");
                        });

                    b.OwnsOne("MachOps.Domain.ValueObjects.Machines.MachType", "MachType", b1 =>
                        {
                            b1.Property<int>("MachineEntityId")
                                .HasColumnType("Int");

                            b1.Property<int>("Value")
                                .HasColumnType("Int")
                                .HasColumnName("MachType");

                            b1.HasKey("MachineEntityId");

                            b1.ToTable("Machines");

                            b1.WithOwner()
                                .HasForeignKey("MachineEntityId");
                        });

                    b.OwnsOne("MachOps.Domain.ValueObjects.Machines.MaintenanceStartDate", "MaintenanceStartDate", b1 =>
                        {
                            b1.Property<int>("MachineEntityId")
                                .HasColumnType("Int");

                            b1.Property<DateTime?>("Value")
                                .HasColumnType("Date")
                                .HasColumnName("MaintenanceStartDate");

                            b1.HasKey("MachineEntityId");

                            b1.ToTable("Machines");

                            b1.WithOwner()
                                .HasForeignKey("MachineEntityId");
                        });

                    b.OwnsOne("MachOps.Domain.ValueObjects.Machines.Name", "Name", b1 =>
                        {
                            b1.Property<int>("MachineEntityId")
                                .HasColumnType("Int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("Nvarchar(30)")
                                .HasColumnName("Name");

                            b1.HasKey("MachineEntityId");

                            b1.HasIndex(new[] { "Value" }, "Unique_Key_Name_Machines")
                                .IsUnique();

                            b1.ToTable("Machines");

                            b1.WithOwner()
                                .HasForeignKey("MachineEntityId");
                        });

                    b.OwnsOne("MachOps.Domain.ValueObjects.Machines.Status", "Status", b1 =>
                        {
                            b1.Property<int>("MachineEntityId")
                                .HasColumnType("Int");

                            b1.Property<int>("Value")
                                .HasColumnType("Int")
                                .HasColumnName("Status");

                            b1.HasKey("MachineEntityId");

                            b1.ToTable("Machines");

                            b1.WithOwner()
                                .HasForeignKey("MachineEntityId");
                        });

                    b.OwnsOne("MachOps.Domain.ValueObjects.Machines.UpdateAt", "UpdateAt", b1 =>
                        {
                            b1.Property<int>("MachineEntityId")
                                .HasColumnType("Int");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("DateTime2")
                                .HasColumnName("UpdateAt");

                            b1.HasKey("MachineEntityId");

                            b1.ToTable("Machines");

                            b1.WithOwner()
                                .HasForeignKey("MachineEntityId");
                        });

                    b.Navigation("CreateAt")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("ExpectedReturnDate")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("MachType")
                        .IsRequired();

                    b.Navigation("MaintenanceStartDate")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Status")
                        .IsRequired();

                    b.Navigation("UpdateAt")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
